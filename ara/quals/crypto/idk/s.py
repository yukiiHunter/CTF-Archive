from Crypto.Util.number import *
from sympy import prevprime

c = 256084579755578542086218114125551851696556861593570039505266814472150395878124073152656973321432612003144066936748696264028836531055262757130008715084730883819241087427098304783995306535367534733304145108570867972800258098243859482322476642688960662237622617416182704984186000558550843048072667969693909457460433288472678049520222878986059183284526212678947818144261221015234212975218108988434750104221897690510909643000785039061676286339251000740701559583623131330615562434944630449204245703732378232440268218842380979930098451204379186073196818865288754028826412016718919661055361073803892996654255614341703973552434214690353439360094470658122060830888746150315689979059717648375863348048066762937533536365343157756588706348597583048596983736117880436305353954912296512342383274022448411248606056432927059528855960392713079667127767956297028547424422986362256747185079725100282718333011603255556269882239693370336170379132596784554724638130705877846123157852498059818857818750288084026416993535430979311127457051695804774275443852341594388987973489146842076451112004647710643951581665730372994225804955394591028139909689585488667786985783952428608974048888953446024160486816173283118444468250000061627095741330535010789084631380643987211428313705942146032852937784033011933867253067722735153766309842103066833140500431081204199978684824856672490683515669403409153235884644366865708468210622050158958459441825447471008285070220259796881210326268946836596353946878980187089097308731848261632

n = 8
flag_parts = []

for i in range(n):
    exp = 0x1337 - 158 * (2 * i + 1)
    prime_part = c // (2**exp)
    prime_part = prevprime(prime_part)  # Reverse nextprime
    flag_parts.append(long_to_bytes(prime_part))
    c -= prime_part * (2**exp)

flag = b"".join(flag_parts)

# Hapus padding PKCS#7 jika ada
pad_len = flag[-1]
if all(b == pad_len for b in flag[-pad_len:]):
    flag = flag[:-pad_len]

# Hapus karakter yang tidak valid (di luar rentang ASCII yang bisa dibaca)
flag_cleaned = b"".join([bytes([b]) for b in flag if 32 <= b <= 126])

# Pastikan format flag valid
if not flag_cleaned.startswith(b"ARA6{"):
    flag_cleaned = b"ARA6{" + flag_cleaned.split(b"ARA6{")[-1]
if not flag_cleaned.endswith(b"}"):
    flag_cleaned += b"}"

print(flag_cleaned.decode(errors='ignore'))
